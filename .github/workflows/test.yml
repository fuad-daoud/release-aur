name: Test Action

on:
  push:
    branches:
      - "**"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25.3"
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -coverprofile=coverage.out -covermode=count ./...
          grep -v "main.go" coverage.out > filtered_coverage.out

      - name: Generate coverage report
        run: go tool cover -func=coverage.out

      - name: Check coverage threshold
        run: |
          coverage=$(go tool cover -func=filtered_coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${coverage}%"
          if (( $(echo "$coverage < 90" | bc -l) )); then
            echo "Coverage is below 90%"
            exit 1
          fi

  test-local-action:
    name: Test Local Action (Pre-release)
    runs-on: ubuntu-latest
    container: archlinux:latest
    needs: [test]

    steps:
      - name: Checkout this action
        uses: actions/checkout@v4

      - name: Use local action
        id: release-aciton
        uses: ./
        with:
          cli_name: pkgmate
          maintainers: "Fuad Daoud <aur@fuad-daoud.com>"
          pkgname: pkgmate-bin
          version: 0.1.1
          description: "TUI application to manage your dependencies"
          url: "https://github.com/fuad-daoud/pkgmate"
          arch: "x86_64"
          licence: "MIT"
          source_x86_64: "pkgmate-bin-0.1.1-x86_64::https://github.com/fuad-daoud/pkgmate/releases/download/0.1.1/pkgmate-linux-amd64"

      - name: Display generated PKGBUILD and .SRCINFO
        run: |
          echo "=== Generated PKGBUILD ==="
          cat ${{ steps.release-aciton.outputs.pkgbuild_path }}
          echo "=========================="
          echo "=== Generated .SRCINFO ==="
          cat ${{ steps.release-aciton.outputs.pkgbuild_path }}
          echo "=========================="

      - name: Validate PKGBUILD format
        run: |
          if ! grep -q "pkgname=pkgmate-bin" ${{ steps.release-aciton.outputs.pkgbuild_path }}; then
            echo "ERROR: pkgname not found"
            exit 1
          fi
          echo "âœ“ Local action validation passed"
      - name: Validate .SRCINFO using makepkg
        run: |
          makepkg -p ${{ steps.release-action.outputs.srcinfo_path }} --printsrcinfo

      - name: Upload generated PKGBUILD
        uses: actions/upload-artifact@v4
        with:
          name: local-pkgbuild
          path: ${{ steps.release-aciton.outputs.pkgbuild_path }}
